import "json"
import "pprint"
import "ssl.https" as https

format_to_link = (name) ->
    return name
        \gsub("[%(%)]", "") -- remove parenthesis and maybe other elements that dont appear in the link
        \gsub("[^%w+%-:]", "-") -- substitute everything thats not a alphanumeric character or a - or : with a hyphen
        \lower() -- make it lower case, dont know if it matters tho

--- anime.fire data looks like : https://animefire.plus/video/mushoku-no-eiyuu-betsu-ni-skill-nanka-iranakatta-n-da-ga/1?tempsubs=1&1761802280
--- we can easily get the last random number part with their download button
--- TODO: find out what the fuck this token is lol
extract_stream_options = (anime_name, episode_index, episode_html_page) ->
    episode_id = episode_html_page\match('<a.-/download/.-%?(%d+)')
    data_link = "https://animefire.plus/video/#{anime_name}/#{episode_index}?tempsubs=#{episode_index}&#{episode_id}"
    res = https.request(data_link)
    data = json.decode(res)
    return { ...data.data }, data.token -- { src: stream_link, label: 360p, 720p etc }[]


extract_episode_list = (anime_html_page) ->
    episodes = []
    for link, index in anime_html_page\gmatch('href="(https://animefire%.plus/animes/[%w%-]+/(%d+))')
        assert(episode_index and episode_link, "couldn't get episode list")
        episodes[] = { :index, :link }
    return episodes


extract_anime_list = (search_html_page) ->
    animes = []
    for title in search_html_page\gmatch('title="(.-) %- Todos os')
        animes[] = {
            name: title
            link: "https://animefire.plus/animes/#{format_to_link(title)}-todos-os-episodios"
        }
    return animes

        
parse_args = (args) ->
    for i, v in ipairs args
        return ['get_version', args[i + 1]] if v == '-v'
    return table.concat(args, ' ')


search_anime = (name) ->
    link = "https://animefire.plus/pesquisar/#{format_to_link(name)}"
    res, code, headers, status = https.request(link)
    return res, anime_name


main = () ->
    --------------------------------------------
    input = arg[1]
    if not input
        print "Choose anime name"
        input = io.read()

    --- search page
    search_page = search_anime(input)
    anime_list = extract_anime_list(search_page)

    which_anime = nil
    which_episode = nil
    if #anime_list != 1 
        print "which anime do you wanna watch?"
        print("#{i}: #{anime.name}") for i, anime in ipairs anime_list
        which_anime = tonumber(io.read())
        assert(which_anime)

    anime = anime_list[which_anime]

    --- get anime overview page with respective episodes
    page, code, headers, status = https.request(anime.link)
    episode_list = extract_episode_list(page)

    print "which episode do you wanna watch?"
    print index for index, _ in ipairs episode_list
    which_episode = tonumber(io.read())
    assert(which_episode)

    ep = episode_list[which_episode]
    print("Which ep: ", ep.index, ep.link)

    --- get the episode page with the video player 
    print 'Getting episode page-------------------------------------------'
    episode_page = https.request(ep.link)
    options, token = extract_stream_options(format_to_link(anime.name), which_episode, episode_page)
    stream_link = token
    opt = nil
    if #options > 1
        print "which quality to stream?"

        for i, opt in ipairs options
            print "#{i}: #{opt.label}"

        opt = tonumber(io.read())
        assert(opt)
        stream_link = options[opt].src

    --- stream it using mpv
    if stream_link
        os.execute("mpv #{stream_link}")


main()

